 <!DOCTYPE html> <html lang="hu"> <head> <meta charset="UTF-8"> <meta name="viewport" content="width=device-width, initial-scale=1.0"> <title>Professzionális Foci Előrejelző Rendszer</title> <script src="https://cdn.tailwindcss.com"></script> <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script> <style> @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap'); body { font-family: 'Inter', sans-serif; } textarea { width: 100%; height: 150px; margin-bottom: 10px; } .result-box { border: 1px solid #ccc; padding: 10px; margin-bottom: 10px; font-size: 14px; } </style> </head> <body class="bg-gray-100 font-sans"> <div class="container mx-auto px-4 py-8"> <h1 class="text-3xl font-bold mb-8 text-center text-gray-800">Professzionális Foci Előrejelző Rendszer</h1>
    <div class="bg-white rounded-lg shadow-md p-6 mb-8">
        <h2 class="text-xl font-semibold mb-4 text-gray-700">Mérkőzések megadása</h2>
        <textarea id="matchupsInput" placeholder="Adja meg a mérkőzéseket JSON formátumban..." class="border border-gray-300 rounded-md p-2"></textarea>
        <button onclick="processMatchups()" class="mt-4 bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition duration-300">Előrejelzések futtatása</button>
    </div>
    
    <div id="modelInfo" class="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 mb-8 rounded-md hidden"></div>
    
    <div id="topPredictions" class="mb-8">
        <h2 class="text-2xl font-bold mb-4 text-gray-800">Top 4 Mérkőzés</h2>
        <div id="topPredictionsContent" class="space-y-4"></div>
    </div>

    <div id="predictions" class="space-y-8"></div>
</div>

<script>
let historicalData = [];

async function loadHistoricalData() {
    try {
        const response = await fetch('https://winmix.hu/csvjson3.json');
        const items = await response.json();
        historicalData = formatItems(items);
        initializeSystem();
    } catch (error) {
        console.error('Hiba történt az adatok betöltése során:', error);
    }
}

function formatItems(items) {
    return items.map(item => {
        const data = item["Hazai csapat;Vendég csapat ;Eredmeny"];
        if (data) {
            const [homeTeam, awayTeam, result] = data.split(";").map(str => str.trim());
            return {
                "Hazai csapat": homeTeam,
                "Vendég csapat": awayTeam,
                "Eredmény": result
            };
        }
    }).filter(Boolean);
}

function processMatchups() {
    const input = document.getElementById('matchupsInput').value;
    let matchups;
    try {
        matchups = JSON.parse(input);
    } catch (error) {
        alert('Hiba: Érvénytelen JSON bemenet. Kérjük, ellenőrizze a bemenetet és próbálja újra.');
        return;
    }

    const predictions = matchups.map(match => predictMatch(match));
    displayPredictions(predictions);
}

function predictMatch(match) {
    const relevantMatches = historicalData.filter(
        m => (m["Hazai csapat"] === match.homeTeam && m["Vendég csapat"] === match.awayTeam) ||
             (m["Hazai csapat"] === match.awayTeam && m["Vendég csapat"] === match.homeTeam)
    );

    const totalMatches = relevantMatches.length;
    const bothTeamsScored = relevantMatches.filter(m => {
        const [homeScore, awayScore] = m.Eredmény.split(':').map(Number);
        return homeScore > 0 && awayScore > 0;
    }).length;

    const bothTeamsScoredProb = totalMatches > 0 ? bothTeamsScored / totalMatches : 0;

    const homeGoals = relevantMatches.reduce((sum, m) => {
        const [homeScore, ] = m.Eredmény.split(':').map(Number);
        return sum + (m["Hazai csapat"] === match.homeTeam ? homeScore : 0);
    }, 0);

    const awayGoals = relevantMatches.reduce((sum, m) => {
        const [, awayScore] = m.Eredmény.split(':').map(Number);
        return sum + (m["Vendég csapat"] === match.awayTeam ? awayScore : 0);
    }, 0);

    const avgHomeGoals = totalMatches > 0 ? homeGoals / totalMatches : 0;
    const avgAwayGoals = totalMatches > 0 ? awayGoals / totalMatches : 0;

    const homeWins = relevantMatches.filter(m => {
        const [homeScore, awayScore] = m.Eredmény.split(':').map(Number);
        return (m["Hazai csapat"] === match.homeTeam && homeScore > awayScore) ||
               (m["Vendég csapat"] === match.homeTeam && awayScore > homeScore);
    }).length;

    const awayWins = relevantMatches.filter(m => {
        const [homeScore, awayScore] = m.Eredmény.split(':').map(Number);
        return (m["Hazai csapat"] === match.awayTeam && homeScore > awayScore) ||
               (m["Vendég csapat"] === match.awayTeam && awayScore > homeScore);
    }).length;

    const draws = totalMatches - homeWins - awayWins;

    const homeWinProb = totalMatches > 0 ? homeWins / totalMatches : 0.33;
    const awayWinProb = totalMatches > 0 ? awayWins / totalMatches : 0.33;
    const drawProb = totalMatches > 0 ? draws / totalMatches : 0.34;

    return {
        match,
        bothTeamsScoredProb,
        avgHomeGoals,
        avgAwayGoals,
        homeWinProb,
        awayWinProb,
        drawProb,
        totalMatches,
        bothTeamsScored,
        explanation: `
            A számítások ${totalMatches} korábbi mérkőzés alapján készültek.
            Mindkét csapat ${bothTeamsScored} alkalommal szerzett gólt (${(bothTeamsScoredProb * 100).toFixed(2)}%).
            A hazai csapat átlagosan ${avgHomeGoals.toFixed(2)} gólt szerzett, míg a vendég csapat ${avgAwayGoals.toFixed(2)}-t.
            A hazai csapat ${homeWins} alkalommal nyert, a vendég csapat ${awayWins} alkalommal, és ${draws} döntetlen volt.
        `
    };
}

function displayPredictions(predictions) {
    const predictionsDiv = document.getElementById('predictions');
    const topPredictionsContent = document.getElementById('topPredictionsContent');
    predictionsDiv.innerHTML = '<h2 class="text-2xl font-bold mb-4 text-gray-800">Összes Előrejelzés</h2>';
    topPredictionsContent.innerHTML = '';

    // Sort predictions by bothTeamsScoredProb in descending order
    predictions.sort((a, b) => b.bothTeamsScoredProb - a.bothTeamsScoredProb);

    // Display top 4 predictions
    predictions.slice(0, 4).forEach((prediction, index) => {
        const matchDiv = createMatchPredictionDiv(prediction, true, index);
        topPredictionsContent.appendChild(matchDiv);
    });

    // Display all predictions
    predictions.forEach((prediction, index) => {
        const matchDiv = createMatchPredictionDiv(prediction, false, index);
        predictionsDiv.appendChild(matchDiv);
    });
}

function createMatchPredictionDiv(prediction, isTopPrediction, index) {
    const matchDiv = document.createElement('div');
    matchDiv.className = `result-box ${isTopPrediction ? 'border-2 border-blue-500' : ''}`;
    
    matchDiv.innerHTML = `
        <h3 class="text-xl font-semibold mb-2 text-gray-700">${prediction.match.homeTeam} vs ${prediction.match.awayTeam}</h3>
        <p class="mb-2">Mindkét csapat gól valószínűsége: <span class="font-semibold text-purple-600">${(prediction.bothTeamsScoredProb * 100).toFixed(2)}%</span></p>
        <p class="mb-2">Várható gólok: <span class="font-semibold text-blue-600">${prediction.match.homeTeam}: ${prediction.avgHomeGoals.toFixed(2)}, ${prediction.match.awayTeam}: ${prediction.avgAwayGoals.toFixed(2)}</span></p>
        <p class="mb-2">Győzelmi esélyek: 
            <span class="font-semibold text-green-600">${prediction.match.homeTeam}: ${(prediction.homeWinProb * 100).toFixed(2)}%</span>, 
            <span class="font-semibold text-red-600">${prediction.match.awayTeam}: ${(prediction.awayWinProb * 100).toFixed(2)}%</span>, 
            <span class="font-semibold text-gray-600">Döntetlen: ${(prediction.drawProb * 100).toFixed(2)}%</span>
        </p>
        <p class="mt-4 text-sm text-gray-600">${prediction.explanation}</p>
        ${isTopPrediction ? `
        <div class="mt-2">
            <label for="goodTip-${index}">Jó tipp:</label>
            <input type="checkbox" id="goodTip-${index}" name="tip-${index}" onclick="toggleCheckbox(this)">
            <label for="badTip-${index}">Rossz tipp:</label>
            <input type="checkbox" id="badTip-${index}" name="tip-${index}" onclick="toggleCheckbox(this)">
        </div>
        ` : ''}
    `;

    return matchDiv;
}

function toggleCheckbox(checkbox) {
    const checkboxes = document.getElementsByName(checkbox.name);
    checkboxes.forEach((cb) => {
        if (cb !== checkbox) cb.checked = false;
    });
}

function initializeSystem() {
    const modelInfo = document.getElementById('modelInfo');
    modelInfo.innerHTML = '<p>A rendszer készen áll a predikciókra!</p>';
    modelInfo.classList.remove('hidden');
}

// Rendszer inicializálása és adatok betöltése
window.onload = function() {
    loadHistoricalData();
    document.getElementById('matchupsInput').value = `[
{"homeTeam": "Manchester Kék", "awayTeam": "Brighton"},
{"homeTeam": "Tottenham", "awayTeam": "Brentford"},
{"homeTeam": "Wolverhampton", "awayTeam": "Liverpool"},
{"homeTeam": "Chelsea", "awayTeam": "Vörös Ördögök"},
{"homeTeam": "Crystal Palace", "awayTeam": "Fulham"},
{"homeTeam": "Nottingham", "awayTeam": "Aston Oroszlán"},
{"homeTeam": "London Ágyúk", "awayTeam": "Everton"},
{"homeTeam": "Newcastle", "awayTeam": "West Ham"}
]`; }; </script>

</body> </html>